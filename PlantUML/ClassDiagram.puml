@startuml
'https://plantuml.com/class-diagram


class Tournament
'class Foosball
'class GroupTournament
class KnockOut
class Player
class Match
class Team
class UI
interface IO
class Panel
class Frame
class DBConnector


Main "1" *-- KnockOut
Tournament <|-- KnockOut
Tournament *-- Team

Main *-- IO
IO<|.. DBConnector
UI *--Frame
Frame*--Panel
'Tournament <-- Foosball
'Foosball <|-- KnockOut
'Foosball <|-- GroupTournament

'GroupTournament *-- Match


Tournament : ArrayList <Team> teams
Tournament : String Name
Tournament : String deadLine
Tournament : KnockOut knockout
Tournament : addTeam(Team)

KnockOut : ArrayList<match> round( Team teams[] )
KnockOut : int round

KnockOut "1" *-- "*" Match
Tournament *-- Match
'GroupTournament *-- Match

'FileController *-- Tournament
Main *-- UI


Match  *--  Team
Team   *--  Player
Panel *-- Match


UI : Knockout currentTournament
UI : int count2
UI : void menu()
UI : void adminMainMenu()
UI : void adminTournamentMainMenu()
UI : void editTournament()
UI : void editMatch(Match match)
UI : void playerMenu(Tournament tournament)
UI : Team teamName(Tournament tournament)
UI : void playerNames(Team team)
UI : void registrationComplete(Tournament tournament, Team team)
UI : void extraPlayer(Team team)
UI : void lastPlayer(Team team)

FileController : Scanner scanner
FileController : File file
FileController : String path
FileController : ArrayList<String> data
FileController : FileWriter writer
FileController : Tournament tournament
FileController : ArrayList<String> readFile()
FileController : void saveTeam(Team team)
FileController : void readTeam()

Main : Tournament tournament
Main : Knockout
Main : static IO
Main : static void main(String[] args)

Tournament : Match[] matches
Tournament : ArrayList <Team> teams
Tournament : String Name
Tournament : String deadLine
Tournament : boolean closeSignUp
Tournament : void printMatches()
Tournament : void printTeams()
Tournament : boolean getIsCloseSignUp()
Tournament : void setCloseSignUp(boolean closeSignUp)
Tournament : String getName()
Tournament : void setName(String name)
Tournament : String getDeadline()
Tournament : void setDeadline(String deadline)
Tournament : ArrayList<Team> getTeams()
Tournament : void addTeam(Team newTeam)
Tournament : String toString()

KnockOut : ArrayList<Match[]> matchesList
KnockOut : Match[] createMatches()
KnockOut : void printBracket()
KnockOut : void createBracket()
KnockOut : void setNextRound()

'Team array maybe?
Match : String name
Match : String date
Match : Team teams1
Match : Team team2
Match : int score1
Match : int score2
Match : int static id
Match : int matchID

Match : Team getWinner( )
Match : Team getTeam1()
Match : Team getTeam2()
Match : void setTeam1(Team team1)
Match : void setTeam2(Team team2)
Match : int getScore1()
Match : int getScore2()
Match : void setScore1(int score1)
Match : void setScore2(int score2)
Match : String toString()

Team : String name
Team : ArrayList <Player> players
Team : String getName()
Team : void setName(String name)
Team : ArrayList<Player> getPlayers()
Team : int getScore()
Team : setScore(int score)
Team : void addScore(int score)
Team : void addPlayer(Player player)
Team : String toString()
Team : int static ID
Team : int teamID

Player : String name

Frame : Panel panel
Frame : Frame(KnockOut knockout)

Panel : Panel(KnockOut knockout)
Panel : final int h , w
Panel : ArrayList <Match[]> brackets

UI : adminTournamentMainMenu()
UI : getUserInput()
UI : getUserInput(String)
UI : getUserInputInt()
UI : getUserInputInt(String)

IO : ArrayList<Team> readTeamData()
IO : Match[] readMatchData()
IO : void saveGameData(Tournament tournament)

DBConnector : static final String DB_URL
DBConnector : static final String USER
DBConnector : static final String PASS
DBConnector : ArrayList<Team> teamData
DBConnector : ArrayList<Match> matchList

DBConnector : ArrayList<Team> readTeamData()
DBConnector : Match[] readMatchData()
DBConnector : void saveGameData(Tournament tournament)

@enduml